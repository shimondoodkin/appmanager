
var jslinq = require('jslinq'); // http://jslinq.codeplex.com 
var linqjs = require('linqjs');  // http://linqjs.codeplex.com

// a simple data store understod by dojo,  simple by means that you can plug to it a simple array or an object.
function dig(url_parts,value,info)
{
 var maybe_error=false,current_url_part="",tdata=value;
 for(var i=0;i<url_parts.length;i++) // digg var
 {
  current_url_part=url_parts[i];
  if(current_url_part.length==0) { maybe_error=true; continue; }
  else if (maybe_error) { error="empty name in request path"; break; }
  if(!tdata)  { info.error="object is undefined"; break; }
  if(current_url_part in tdata)
  {
   info.level++;
   tdata=tdata[current_url_part]; value=tdata;
  }
  else if(current_url_part=='length')// little assistance
  {
   if(typeof tdata=='object'&& !(tdata instanceof Array))
   {
    value=Object.keys(tdata).length;
   }
   else
   if(typeof tdata.length!='undefined')
   {
    value=tdata.length;
   }
   else // not found
   {
    info.error="object by key is undefined"; break;// is this a good response?
   }
  }
  else if(current_url_part=='keys')// little assistance
  {
   if(typeof tdata=='object')
   {
    value=Object.keys(tdata);
   }
   else // not found
   {
    info.error="keys of not an object"; break;// is this a good response?
   }
  }
  else // not found
  {
   info.error="key not found"; break;// is this a good response?
  }
 }
 //console.log(value);
 return value;
}

function build_sort_query(query,info)
{
 //jslinq is http://jslinq.codeplex.com/
 var sort=false,desc=false;
 var match;
 for(x in query) // build a sort by form query if query exists
 {
  if(match=x.match(/^sort\((.+)\)$/))
  {
   sort=match[1];
   delete query[match[0]];  // note it modifies the query string here in the process maybe it is a good idea was to clone it befora passing it to this function.
   sort=sort.split(',');
   sort=sort[0]||false; // we take just the first element no multi sort, this linq does not have multisort
   if(sort.charAt(0)=='-')
   {
    sort=sort.substr(1);
    desc=true;
   }
   else if(sort.charAt(0)==' ')
   {
    sort=sort.substr(1);
   }
  }
 }
 info.sort=sort;
 info.desc=desc;
}

function sort_by_sort_query(filtered,value,valuedata,sort,desc)
{
 if(!filtered) filtered=jslinq(value);
 filtered=filtered[desc?'OrderByDescending':'OrderBy'](function(item) { return isobject?valuedata[item][sort]:item[sort]; });
 return filtered;
}

function search_by_query(filtered,value,valuedata,query,isobject)
{
     if(!filtered) filtered=jslinq(value);
     filtered=filtered.Where(function(item)
     {
      if(item)
      {
       var ok=true;
       for(x in query)
       {
        if(!(x in (isobject?valuedata[item]:item))) 
        {
         ok=false;
         break;
        }
        if((isobject?valuedata[item][x]:item[x]).toLowerCase().indexOf(query[x].toLowerCase())==-1)
        {
         ok=false;
         break;
        }
       }
       return ok;
      }
      else
       return false;
     });
 return filtered;
}

function datastore(data,req,res,url,query,send)
{
 var url_parts=url.substr(1).split('/'); // remove first '/' and covert to array
 req.method=req.method.toUpperCase();
 if (req.method == 'GET' )
 {
  var value_start=0,value_end=24;
  
  var value,info={level:0,error:""}; 
  value=dig(url_parts,data,info);
  var error=info.error;
  var level=info.level;
  if(error)
  {
   send(error+" url="+url,false,404);
   return;
  }
  else
  {
   var isobject=false,valuedata={};

   //make array if not array
   if(typeof value=='object' && !(value instanceof Array)) // we used to use arrays, so if it is an object then mark it as an object and convert it to array of keys
   {
    isobject=true;
    valuedata=value;
    value=Object.keys(valuedata);
   }
   
   if(value instanceof Array)         // is it not a simple value? and it should be filtered and cut to size
   {
   
    var info={sort:false,desc:false};
    build_sort_query(query,info);
    var sort=info.sort;var desc=info.desc; 
    var filtered=false;
    if(Object.keys(query).length==0)query=false;
    if(query) filtered=search_by_query(filtered,value,valuedata,query,isobject); // use the query if query was left after build_sort_query
    if(sort)  filtered=sort_by_sort_query(filtered,value,valuedata,sort,desc); // use the sort if sort was found in build_sort_query
    if(filtered)value=filtered.items;// return the items from jslinq
    

    // calculate of rangle
    var value_range=req.headers['range']||"";
    if(value_range=value_range.match(/(\d+-\d+)/))
    {
     value_range=value_range[1].split("-");
     value_start=parseInt(value_range[0]);
     value_start=Math.min(value.length,Math.max(0,value_start));
     value_end=parseInt(value_range[1]);
     value_end=Math.min(value.length,value_end);
    }

    res.writeHead(200, {'Content-Type':'text/plain','Content-Range':'items '+value_start+'-'+value_end+'/'+value.length});
    
    var senddata;
    if(isobject)
    {
     var valuekeys=value.slice(value_start,value_end+1);
     senddata={};
     for(var vkk,vk=0;vk<valuekeys.length;vk++)
     {
      vkk=valuekeys[vk];
      senddata[vkk]=valuedata[vkk];
     }
    }
    else
    {
     senddata=value.slice(value_start,value_end+1);
    }
    
    if(level<=0)
     res.end(JSON.stringify(Object.keys(senddata)));
    else
     res.end(JSON.stringify(senddata));
   }
   else // a simple value 
   {
    res.writeHead(200, {'Content-Type':'text/plain'});
    res.end(JSON.stringify(value));
   }
  }
 }
 if (req.method == 'DELETE' )
 {
  console.log("DELETE is not implemented",url,query,req.headers);  
 }
 if (req.method == 'PUT' || req.method == 'POST' )
 {
  var body = '';
  req.on('data', function (data)
  {
   body += data;
  });
  req.on('end', function ()
  {
   console.log("PUT or POST is not implemented",url,query,req.headers);
   console.log(body);
   // use POST
  });
 }
}

module.exports=datastore;
